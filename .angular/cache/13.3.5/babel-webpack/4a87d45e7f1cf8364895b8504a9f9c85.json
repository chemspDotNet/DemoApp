{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst productUrl = environment.baseUrlsProduct;\nexport let ProductDataService = /*#__PURE__*/(() => {\n  class ProductDataService {\n    constructor(http) {\n      this.http = http;\n      this.count = 4;\n    } // getProducts() {\n    //     return this.http.get(productUrl).pipe(map(x => {\n    //         this.count++;\n    //         return x\n    //     }), retry(2), catchError((error, src) => {\n    //         console.log('Caught in CatchError. Throwing error')\n    //         console.log(src);\n    //         if (this.count > 3) {\n    //             throw new Error(\"Failed  after 3 retry\");\n    //         }\n    //         return throwError(error);\n    //     }));\n    // }\n\n\n    getProducts() {\n      return this.http.get(productUrl).pipe(catchError(this.errorHandler));\n    }\n\n    getProductsById(id) {\n      debugger;\n      const x = this.http.get(productUrl).pipe(map(x => x.filter(p => p.id == id)[0]));\n      return x;\n    }\n\n    errorHandler(error) {\n      console.log('Caught in CatchError. Throwing error');\n      return throwError(error);\n    }\n\n  }\n\n  ProductDataService.ɵfac = function ProductDataService_Factory(t) {\n    return new (t || ProductDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductDataService,\n    factory: ProductDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}