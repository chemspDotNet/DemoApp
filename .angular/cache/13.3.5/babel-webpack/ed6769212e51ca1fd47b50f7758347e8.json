{"ast":null,"code":"import { from, interval, Observable } from \"rxjs\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/product-data.service\";\nimport * as i2 from \"@angular/common\";\nexport let MyobservableComponent = /*#__PURE__*/(() => {\n  class MyobservableComponent {\n    constructor(dtaservice) {\n      this.dtaservice = dtaservice;\n      this.counter = 0;\n    }\n\n    ngOnInit() {\n      ///////////////////////////////observablele example 1 ////////////////////////////////\n      let x = interval(2000);\n      x.subscribe(data => {\n        console.log(data);\n      }); //---------------------------------------------------------------------------------------//\n      //-----------------------------   observablele example 2--------------------------------//\n\n      let srcArray = from([1, 2, 'A', 4]).pipe(map(val => {\n        let result = val * 2;\n\n        if (Number.isNaN(result)) {\n          console.log('Errors Occurred in Stream');\n          throw new Error(\"Result is NaN\");\n        }\n\n        return result;\n      }));\n      srcArray.subscribe(x => console.log(x), err => console.log(err)); //-----------------------------------------------------------------------------------------//\n      //-----------------------------   observablele example 3--------------------------------//\n\n      this.customObservable = new Observable(obsever => {\n        setInterval(() => {\n          if (this.counter < 8) {\n            obsever.next(this.counter++);\n          }\n\n          if (this.counter >= 5) {\n            obsever.complete();\n          }\n\n          if (this.counter >= 8) {\n            obsever.error(\"Somthing went wrong\");\n          }\n        }, 1000);\n      });\n      this.customObservable.subscribe(data => {\n        console.log(data);\n      }, errr => {\n        console.log(errr);\n      }, () => {\n        console.log(\"No more data from source anymore. its is completed\");\n      });\n    } //-----------------------------------------------------------------------------------------//\n\n\n    myEventHandler() {\n      this.products = this.dtaservice.getProducts().subscribe(emp => {\n        this.products = emp;\n      }, err => {\n        debugger;\n        console.log(err);\n      });\n    }\n\n  }\n\n  MyobservableComponent.ɵfac = function MyobservableComponent_Factory(t) {\n    return new (t || MyobservableComponent)(i0.ɵɵdirectiveInject(i1.ProductDataService));\n  };\n\n  MyobservableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MyobservableComponent,\n    selectors: [[\"app-myobservable\"]],\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"title\"], [3, \"click\"]],\n    template: function MyobservableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \" My Observable Component\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function MyobservableComponent_Template_button_click_2_listener() {\n          return ctx.myEventHandler();\n        });\n        i0.ɵɵtext(3, \"Get Products\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"hr\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"json\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\\n\", i0.ɵɵpipeBind1(6, 1, ctx.products), \"\");\n      }\n    },\n    pipes: [i2.JsonPipe],\n    encapsulation: 2\n  });\n  return MyobservableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}